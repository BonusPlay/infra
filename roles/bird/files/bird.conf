################################################
#               Variable header                #
################################################

define OWNAS =  65069;
define OWNIP =  198.18.69.1;
define OWNNET = 198.18.69.0/24;
define OWNNETSET = [198.18.69.0/24+];

################################################
#                 Header end                   #
################################################

log "/var/log/bird.log" { debug, trace, info, remote, warning, error, auth, fatal, bug };

router id OWNIP;

protocol device {
    scan time 10;
}

/*
 *  Utility functions
 */
function is_self_net() {
  return net ~ OWNNETSET;
}

# slightly modified https://indico.csnog.eu/event/1/contributions/22/attachments/18/29/Ondrej_Filip.pdf
function bgp_import_flter() prefix set martians;
{
    martians = [
        169.254.0.0/16+,
        172.16.0.0/12+,
        192.168.0.0/16+,
        10.0.0.0/8+,
        224.0.0.0/4+,
        240.0.0.0/4+,
        0.0.0.0/32-,
        0.0.0.0/0{25,32},
        0.0.0.0/0{0,7}
    ];

    # Avoid RFC1918 networks
    # Don't import your own network lul
    if (net ~ martians) || (is_self_net()) then return false;
    return true;
}

protocol direct {
	ipv4;
	interface "p4net";
}

protocol kernel {
    scan time 20;
    learn;
    persist;

    ipv4 {
        import filter {
            # only nearest hops here, since /32
            if net ~ [
                198.18.1.1/32,
                198.18.57.1/32,
                198.18.70.1/32
            ] then accept;
            reject;
        };
        export filter {
            if source = RTS_STATIC then reject;
            krt_prefsrc = OWNIP;
            accept;
        };
    };
}

protocol static {
    route OWNNET via "lo";

    ipv4 {
        import all;
        export none;
    };
}

template bgp dnpeers {
    local as OWNAS;
    path metric 1;
    multihop;

    ipv4 {
        import filter {
          if !is_self_net() then accept; else reject;
        };

        export filter { if source ~ [RTS_STATIC, RTS_BGP] then accept; else reject; };
        import limit 1000 action block;
    };
}

protocol bgp chivay from dnpeers {
        neighbor 198.18.1.1 as 65001;
}
protocol bgp dominik from dnpeers {
        neighbor 198.18.57.1 as 65057;
}
protocol bgp msm from dnpeers {
        neighbor 198.18.70.1 as 65070;
}
